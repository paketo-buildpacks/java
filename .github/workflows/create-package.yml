name: Create Package
on:
    release:
        types:
            - published
    push:
        branches:
            - main
jobs:
    create-package:
        name: Create Package
        runs-on:
            - ubuntu-latest
        permissions:
          contents: read
          packages: write
        steps:
            - name: Docker login ghcr.io
              if: ${{ (github.event_name != 'pull_request' || ! github.event.pull_request.head.repo.fork) && (github.actor != 'dependabot[bot]') }}
              uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
            - uses: actions/setup-go@v2
              with:
                go-version: "1.16"
            - name: Install create-package
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                GO111MODULE=on go get -u -ldflags="-s -w" github.com/paketo-buildpacks/libpak/cmd/create-package
            - name: Install crane
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                echo "Installing crane ${CRANE_VERSION}"

                mkdir -p "${HOME}"/bin
                echo "${HOME}/bin" >> "${GITHUB_PATH}"

                curl \
                  --show-error \
                  --silent \
                  --location \
                  "https://github.com/google/go-containerregistry/releases/download/v${CRANE_VERSION}/go-containerregistry_Linux_x86_64.tar.gz" \
                | tar -C "${HOME}/bin" -xz crane
              env:
                CRANE_VERSION: 0.6.0
            - name: Install pack
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                echo "Installing pack ${PACK_VERSION}"

                mkdir -p "${HOME}"/bin
                echo "${HOME}/bin" >> "${GITHUB_PATH}"

                curl \
                  --location \
                  --show-error \
                  --silent \
                  "https://github.com/buildpacks/pack/releases/download/v${PACK_VERSION}/pack-v${PACK_VERSION}-linux.tgz" \
                | tar -C "${HOME}"/bin -xz pack
              env:
                PACK_VERSION: 0.21.1
            - name: Enable pack Experimental
              if: ${{ false }}
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                echo "Enabling pack experimental features"

                mkdir -p "${HOME}"/.pack
                echo "experimental = true" >> "${HOME}"/.pack/config.toml
            - uses: actions/checkout@v2
            - if: ${{ false }}
              uses: actions/cache@v2
              with:
                key: ${{ runner.os }}-go-${{ hashFiles('**/buildpack.toml', '**/package.toml') }}
                path: |-
                    ${{ env.HOME }}/.pack
                    ${{ env.HOME }}/carton-cache
                restore-keys: ${{ runner.os }}-go-
            - name: Compute Version
              id: version
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                if [[ ${GITHUB_REF} =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                  VERSION=${BASH_REMATCH[1]}
                elif [[ ${GITHUB_REF} =~ refs/heads/(.+) ]]; then
                  VERSION=${BASH_REMATCH[1]}
                else
                  VERSION=$(git rev-parse --short HEAD)
                fi

                echo "::set-output name=version::${VERSION}"
                echo "Selected ${VERSION} from
                  * ref: ${GITHUB_REF}
                  * sha: ${GITHUB_SHA}
                "
            - name: Create Package
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                if [[ "${INCLUDE_DEPENDENCIES}" == "true" ]]; then
                  create-package \
                    --cache-location "${HOME}"/carton-cache \
                    --destination "${HOME}"/buildpack \
                    --include-dependencies \
                    --version "${VERSION}"
                else
                  create-package \
                    --destination "${HOME}"/buildpack \
                    --version "${VERSION}"
                fi

                [[ -e package.toml ]] && cp package.toml "${HOME}"/package.toml
                printf '[buildpack]\nuri = "%s"\n\n[platform]\nos = "%s"\n' "${HOME}"/buildpack "${OS}" >> "${HOME}"/package.toml
              env:
                INCLUDE_DEPENDENCIES: "false"
                OS: linux
                VERSION: ${{ steps.version.outputs.version }}
            - name: Package Buildpack
              id: package
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                if [[ -n "${PUBLISH+x}" ]]; then
                  pack buildpack package \
                    "${PACKAGE}:${VERSION}" \
                    --config "${HOME}"/package.toml \
                    --publish

                  crane tag "${PACKAGE}:${VERSION}" latest
                  echo "::set-output name=digest::$(crane digest "${PACKAGE}:${VERSION}")"
                else
                  pack buildpack package \
                    "${PACKAGE}:${VERSION}" \
                    --config "${HOME}"/package.toml \
                    --format "${FORMAT}"
                fi
              env:
                PACKAGE: ghcr.io/garethjevans/java
                PUBLISH: "true"
                VERSION: ${{ steps.version.outputs.version }}
            - name: Update release with digest
              if: ${{ false }}
              run: |
                #!/usr/bin/env bash

                set -euo pipefail

                PAYLOAD=$(cat "${GITHUB_EVENT_PATH}")

                RELEASE_ID=$(jq -n -r --argjson PAYLOAD "${PAYLOAD}" '$PAYLOAD.release.id')
                RELEASE_TAG_NAME=$(jq -n -r --argjson PAYLOAD "${PAYLOAD}" '$PAYLOAD.release.tag_name')
                RELEASE_NAME=$(jq -n -r --argjson PAYLOAD "${PAYLOAD}" '$PAYLOAD.release.name')
                RELEASE_BODY=$(jq -n -r --argjson PAYLOAD "${PAYLOAD}" '$PAYLOAD.release.body')

                gh api \
                  --method PATCH \
                  "/repos/:owner/:repo/releases/${RELEASE_ID}" \
                  --field "tag_name=${RELEASE_TAG_NAME}" \
                  --field "name=${RELEASE_NAME}" \
                  --field "body=${RELEASE_BODY//<!-- DIGEST PLACEHOLDER -->/\`${DIGEST}\`}"
              env:
                DIGEST: ${{ steps.package.outputs.digest }}
                GITHUB_TOKEN: ${{ secrets.JAVA_GITHUB_TOKEN }}
            - if: ${{ false }}
              uses: docker://ghcr.io/buildpacks/actions/registry/request-add-entry:4.0.1
              with:
                address: ghcr.io/garethjevans/java@${{ steps.package.outputs.digest }}
                id: garethjevans/java
                token: ${{ secrets.JAVA_GITHUB_TOKEN }}
                version: ${{ steps.version.outputs.version }}
